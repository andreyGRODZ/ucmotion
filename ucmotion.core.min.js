/*!
 * UC Motion Core (runtime) v1.3.2-fix
 * Author: andreyGRODZ
 * Homepage: https://andreygrodz.ru
 * Repository: https://github.com/andreyGRODZ/ucmotion
 * License: MIT
 */

(function (w,d){'use strict';

  // ===== guard + reuse previous state =====
  const PREV = w.UCM || {};
  const REGISTRY = PREV.__REGISTRY instanceof Map ? PREV.__REGISTRY : new Map();
  let CSS_INJECTED_FOR = typeof PREV.__CSS_INJECTED_FOR === 'string' ? PREV.__CSS_INJECTED_FOR : '';

  // -------- defaults --------
  const DEFAULTS = {
    effect:'words',
    randomize:false,
    baseDelay:200,
    delayBetweenLines:60,
    parallelLines:true,
    parallelLineStagger:60,
    letterWordDelay:30,
    threshold:0.4,
    preferBasicDelay:true,
    autoReset:false,

    // ↓ bleed обнулён по умолчанию
    bleedK:   { top:0, right:0, bottom:0, left:0 },
    bleedMin: { top:0, right:0, bottom:0, left:0 },
    italicWordPadK:  0.26,
    italicWordPadMin: 12
  };

  let CONFIG = {...DEFAULTS, ...(PREV.defaults||{})};

  // -------- utils: DOM / Tilda / timing --------
  const ready = cb => d.readyState!=='loading' ? cb() : d.addEventListener('DOMContentLoaded',cb);

  function getAtomSafe(el){
    if (!el) return null;
    if (el.classList && el.classList.contains('tn-atom')) return el;
    let atom = el.querySelector && el.querySelector('.tn-atom');
    if (atom) return atom;
    const tw = d.createTreeWalker(el, NodeFilter.SHOW_ELEMENT, null);
    while (tw.nextNode()){
      const n = tw.currentNode;
      const cls = (n.getAttribute && (n.getAttribute('class')||''))+'';
      if (cls.indexOf('tn-atom')!==-1) return n;
    }
    return null;
  }

  const toMs=v=>Math.max(0,parseFloat(String(v).replace(',','.'))*1000||0);
  const hasBasic=el=>el?.hasAttribute?.('data-animate-style');
  const readBasicDelay=(el,fallback)=> hasBasic(el)?toMs(el.getAttribute('data-animate-delay')??'0'):fallback;

  function neutralizeBasic(el){
    if(!el)return;
    el.style.transition='none'; el.style.opacity='1'; el.style.transform='none';
    const atom=getAtomSafe(el);
    if(atom){ atom.style.transition='none'; atom.style.opacity='1'; atom.style.transform='none'; }
  }

  function injectBasicNeutralizerFor(selectors){
    if(!selectors || !selectors.length) return;
    const key=selectors.slice().sort().join('|');
    if(key===CSS_INJECTED_FOR) return;
    CSS_INJECTED_FOR=key;
    const css=`
      ${selectors.map(s=>`${s}.t-animate,${s}.t-animate_wait,${s}.t-animate_started`).join(',')}
        {opacity:1!important;transform:none!important;transition:none!important;}
      ${selectors.map(s=>`${s} [data-animate-style],${s} [data-animate-sbs-opts]`).join(',')}
        {animation:none!important;transition:none!important;}
      ${selectors.map(s=>`${s} .tn-atom`).join(',')}
        {opacity:1!important;transform:none!important;transition:none!important;display:inline-block;overflow:hidden;}
      .uc-line{display:block;overflow:hidden;line-height:inherit;
        padding: var(--uc-bleed-top,0) var(--uc-bleed-right,0) var(--uc-bleed-bottom,0) var(--uc-bleed-left,0);
        margin:  calc(var(--uc-bleed-top,0) * -1) calc(var(--uc-bleed-right,0) * -1) calc(var(--uc-bleed-bottom,0) * -1) calc(var(--uc-bleed-left,0) * -1);
      }
      .uc-line.uc-gap{margin-top:0;}
      .uc-word,.uc-space,.uc-letter{
        display:inline-block;white-space:pre;
        will-change:opacity,transform,filter;
        backface-visibility:hidden;-webkit-font-smoothing:antialiased;
        overflow:visible;
      }
      .uc-italic-fix{--uc-i-pad:0px;padding-right:var(--uc-i-pad);margin-right:calc(var(--uc-i-pad) * -1);}
    `.replace(/\s+/g,' ');
    const tag=d.createElement('style'); tag.type='text/css'; tag.appendChild(d.createTextNode(css)); d.head.appendChild(tag);
  }

  // -------- split / lines helpers (из v1.3.1, без изменений) --------
  function splitWithEntities(text){
    return text.replace(/&[a-zA-Z0-9#]+;/g,'|$&|').split('|').flatMap(p=>(p.length>1 && /^&.*;$/.test(p))?[p]:[...p]);
  }

  function expandItalicWords(root){
    const words=[...root.querySelectorAll('.uc-word')];
    words.forEach(w=>{
      const cs=getComputedStyle(w);
      const italic=(cs.fontStyle||'').toLowerCase();
      if(!(italic.includes('italic')||italic.includes('oblique'))) return;
      const fs=parseFloat(cs.fontSize)||16;
      const pad=Math.max(Math.ceil(fs*CONFIG.italicWordPadK), CONFIG.italicWordPadMin);
      w.classList.add('uc-italic-fix');
      w.style.setProperty('--uc-i-pad', pad+'px');
    });
  }

  // … тут оставляем ensureWrapped, scheduleByLines, readTogglesFrom, decideUnit полностью как в v1.3.1 …

  // -------- public API --------
  const UCM={
    version:'1.3.2-fix',
    author:'andreyGRODZ',
    homepage:'https://andreygrodz.ru',
    repository:'https://github.com/andreyGRODZ/ucmotion',
    defaults:{...CONFIG},
    ready:(function(){let r=false;return new Promise(res=>{const f=()=>{if(r)return;r=true;res();};if(d.readyState!=='loading')setTimeout(f,0);else d.addEventListener('DOMContentLoaded',()=>setTimeout(f,0),{once:true});d.addEventListener('tilda:blocks:rendered',()=>setTimeout(f,0),{once:true});});})(),
    config(overrides={}){ CONFIG={...CONFIG,...overrides}; this.defaults={...CONFIG}; return this; },
    register(selector,handlers){ if(!selector||!handlers||typeof handlers.prepare!=='function'||typeof handlers.run!=='function') return this; REGISTRY.set(selector,handlers); return this; },
    unregister(selector){ REGISTRY.delete(selector); return this; },
    init(selector){ /* оставляем init ровно как в v1.3.1 */ return this; },
    util:{ready,getAtom:getAtomSafe,toMs,hasBasic,readBasicDelay,neutralizeBasic,injectBasicNeutralizerFor,splitWithEntities,expandItalicWords/*…etc*/},
    __REGISTRY:REGISTRY,
    __CSS_INJECTED_FOR:CSS_INJECTED_FOR,
    __coreLoaded:true
  };

  (function banner(){
    if (w.__UCM_BANNER__) return;
    w.__UCM_BANNER__=true;
    try {
      console.log('%cUC Motion '+UCM.version+' — by '+UCM.author+'  |  '+UCM.repository,'color:#25EDFF;font-weight:600;');
    } catch(_) {}
  })();

  w.UCM=UCM;
})(window,document);
